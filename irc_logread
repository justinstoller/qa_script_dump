#!/opt/local/bin/perl
use Term::ANSIColor;
use File::Temp "tempfile";
use Text::Wrap qw(wrap);
use strict;
use warnings;

#fit my terminal
$Text::Wrap::columns = 80; 

# don't destroy urls
$Text::Wrap::huge = 'overflow'; 

my @colors= qw/red green yellow blue magenta cyan/;

# holds names to colors
my %colormap;

my ($fh, $filename) = tempfile();

# open file or read stdin
if ( $ARGV[0] ){
	open F, '<', $ARGV[0] or die "couldn't open file: $!";
	} 
else { *F = *main::STDIN; } 

while (my $l = <F>){
	# mention some notices
	(( print $fh color( "reset bold yellow"), $l ) && next )
		if ((substr $l,0,3) eq '---');

	# get the type of message and name
	my ($time, $opchrs, $per );
	chomp $l; 
	# grab time followed by a space then the leading < before the name chuck ops
	$l =~ s/^(\d\d:\d\d)\s([-!* <]+)[\s@+]//;
	($time, $opchrs) = ($1,$2); 
	if ((defined $opchrs ) && ($opchrs ne '-!-')){ 
		# these are messages, so get the name 
		$l =~ s/^([^\s]+)\s//;
		$per = $1; 
		my $lines = wrap("\t","\t",$l);
		my $clr = '';
		if ($opchrs eq ' *'){
			$clr = colorchk ($per);
			print $fh color( "reset bold $clr" ),"*$per*"; }
		else {
			chop $per;
			$clr = colorchk ($per);
			print $fh color( "reset bold $clr" ),$per; 
		}
		print $fh color("reset"), " ... (\@$time):", "\n";
		print $fh color("reset"),$lines, "\n\n"; 
	}
	else {
		if ($l =~ /now known as/){
			print $fh color("reset bold yellow"),$l,"\n";}
		else {print $fh color("reset underline yellow"),$l,"\n"; }
	}
}

exec '/usr/bin/less', '-r', $filename;

sub colorchk {
	my $per = shift;
	if (exists $colormap{$per} ) {
		return $colormap{$per};
	}
	else {
		my $color = shift @colors;
		push @colors, $color;
		$colormap{$per}=$color;
		return $color;
	}
}
